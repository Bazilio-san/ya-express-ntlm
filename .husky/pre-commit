#!/bin/bash

#=============== Обновление версии перед комитом: minor + 1 ==========================

#File: .git/hooks/pre-commit
# Version 2024-04-14

set -e

c="\x1b[1;36m"; lc="\x1b[0;36m";
g="\x1b[1;32m"; lg="\x1b[0;32m";
m="\x1b[1;35m"; lm="\x1b[0;35m";
r="\x1b[1;31m"; lr="\x1b[0;31m";
y="\x1b[1;33m"; ly="\x1b[0;33m";
w="\x1b[0m";

echo_lg() { if [ "$2" = "" ]; then /bin/echo -e "$lg$1$w"; else /bin/echo -en "$lg$1$w"; fi	}
echo_g() { /bin/echo -e "$g$1$w";  };
echo_r() { /bin/echo -e $r"$1"$w;  };
echo_m() { /bin/echo -e $m"$1"$w;  };
echo_y() { /bin/echo -e $y"$1"$w;  };
echo_c() { /bin/echo -e $c"$1"$w;  };


echo_m "**** [pre-commit hook] ****"

get_versions(){
  old_version=`cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]'`
#  echo_m "**** Old version is ${g}${old_version}${m} ****"
  version_split=( ${old_version//./ } )
  major=${version_split[0]:-0}
  minor=${version_split[1]:-0}
  patch=${version_split[2]:-0}
  let "patch=patch+1"
  new_version="${major}.${minor}.${patch}"
}

print_title(){
  projectName=`cat package.json | grep name | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]'`
  echo_m "Bumping version of ${g}${projectName}${m}: ${y}${old_version}${m} -> ${g}${new_version}${m}"
}

update_version_json(){
  echo_m "Updating version.json"
  sed -i -e "0,/$old_version/s/$old_version/$new_version/" ./src/version.json
}

update_package_json_version(){
  echo_m "Updating package.json"
  sed -i -e "0,/$old_version/s/$old_version/$new_version/" package.json
}

update_package_lock_json_version(){
  echo_m "Updating package-lock.json via mpm install"
  npm i > /dev/null
}

branch_name=$(git symbolic-ref --short HEAD)
retcode=$?

if [[ $retcode -ne 0 ]] ; then
    echo_y "**** Version will not be bumped since retcode is not equals 0 ****"
    exit 0
fi

if [[ $branch_name == *"_nap" ]] ; then
    echo_y "**** Version will not be bumped since branch name ends with '_nap'. ****"
    exit 0
fi

if [[ $branch_name == *"_local" ]] ; then
    echo_y "**** Version will not be bumped since branch name ends with '_local'. ****"
    exit 0
fi

if [[ "$DONT_BUMP_VERSION" -eq "1" ]] ; then
    echo_y "**** Version will not be bumped since variable DONT_BUMP_VERSION is set. ****"
    exit 0
fi

get_versions
print_title

update_version_json
update_package_json_version
update_package_lock_json_version

echo_m "git add <versioned files>"
git add package.json package-lock.json ./src/version.json
